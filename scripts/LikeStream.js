const tg = window.Telegram.WebApp;
const userId_tg = tg.initDataUnsafe.user.id;
const WebAppTelegramData = tg.initDataUnsafe;
console.log(tg) 
console.log(WebAppTelegramData)


document.querySelector('.svg-container-like').addEventListener('click', async function() {
    const heartPath = document.getElementById('heart-path');

    
    let {channelName, updateSwitch} = getStoredValues();

    console.log("Like");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (heartPath.classList.contains('heart-like-red')) {
        // –ï—Å–ª–∏ —É–∂–µ –∫—Ä–∞—Å–Ω—ã–π, —Å–±—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        heartPath.classList.remove('heart-like-animation');
    } else {
        // –ï—Å–ª–∏ –Ω–µ –∫—Ä–∞—Å–Ω—ã–π, –∑–∞–∫—Ä–∞—Å–∏—Ç—å –≤ –∫—Ä–∞—Å–Ω—ã–π –∏ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        heartPath.classList.add('heart-like-red');
        heartPath.classList.add('heart-like-animation');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
        heartPath.addEventListener('animationend', () => {
            heartPath.classList.remove('heart-like-animation');
        });

        // –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞
        try {
            const result = await addLikeToStream(channelName, userId_tg, WebAppTelegramData);
            if (result) {
                console.log('Like added successfully:', result);
            }
        } catch (error) {
            console.error('Error adding like:', error);
        }
    }
});


// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
function getStoredValues() {
    const hiddenElement = document.getElementById('ChannelNameData').value;
    const [channelName, updateSwitch] = hiddenElement.split(':');
    return { channelName, updateSwitch };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ChannelName
function watchChannelName(callback) {
    let { channelName: lastChannelName, updateSwitch: lastUpdateSwitch } = getStoredValues(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

    setInterval(async () => { // –î–µ–ª–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
        const { channelName: currentChannelName, updateSwitch: currentUpdateSwitch } = getStoredValues(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

        if (currentChannelName !== lastChannelName || currentUpdateSwitch !== lastUpdateSwitch) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–∞–∫–æ–µ-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            console.log("Values changed:", { currentChannelName, currentUpdateSwitch });
            await callback(currentChannelName); // –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            lastChannelName = currentChannelName; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            lastUpdateSwitch = currentUpdateSwitch;
        }
    }, 500); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
watchChannelName(async (newChannelName) => { // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    const heartPath = document.getElementById('heart-path');
    const liked = await checkIfUserLikedStream(newChannelName, userId_tg);
    if (liked) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        heartPath.classList.add('heart-like-red');
        heartPath.classList.add('heart-like-animation');
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ª–∞–π–∫–Ω—É–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        heartPath.classList.remove('heart-like-red');
        heartPath.classList.remove('heart-like-animation');
    }
});


async function addLikeToStream(channelName, user_id, WebAppTelegramData) {
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await axios.post('https://test-site-domens.site:7070/api/stream-add-like', {
            channelName: channelName,
            user_id: user_id,
            WebAppTelegramData: WebAppTelegramData
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (response.data && response.data.message) {
            console.log('Response:', response.data.message);
            return response.data.message;
        } else {
            console.error('Unexpected response format:', response);
            return null;
        }
    } catch (error) {
        console.error('Error response data:', error);
        return null;
    }
}

async function checkIfUserLikedStream(channelName, user_id) {
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ channelName –∏ user_id
        const response = await axios.get('https://test-site-domens.site:7070/api/check-like', {
            params: {
                channelName: channelName,
                user_id: user_id
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (response.data && response.data.liked !== undefined) {
            console.log(`User has ${response.data.liked ? 'liked' : 'not liked'} the stream.`);
            return response.data.liked;
        } else {
            console.error('Unexpected response format:', response);
            return null;
        }
    } catch (error) {
        console.error('Error checking if user liked the stream:', error);
        return null;
    }
}


async function fetchRefCode(id_user) {
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å id_user
        const response = await axios.post('https://test-site-domens.site:7070/api/get-refcode', {
            id_user: id_user
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if (response.status === 200) {
            console.log('RefCode:', response.data.refCode);
            return response.data.refCode;
        } else {
            console.warn('Unexpected response:', response);
            return null;
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (error.response) {
            console.error('Error:', error.response.data.message);
        } else {
            console.error('Error:', error.message);
        }
        return null;
    }
}
document.querySelector('.svg-container-share').addEventListener('click', async () => {
    const botUsername = 'test_yotubesdd_bot/test';
    let { channelName, updateSwitch } = getStoredValues();

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º await –≤–Ω—É—Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const refCode = await fetchRefCode(userId_tg);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ refCode –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!refCode) {
            console.error('RefCode –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const startParameter = `${refCode}-${channelName}`;
        const messageText = 'Join the stream and collect your CMA tokensüòé';
        const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(`https://t.me/${botUsername}?startapp=${startParameter}`)}&text=${encodeURIComponent(messageText)}`;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ Telegram
        Telegram.WebApp.openTelegramLink(shareUrl);
    } catch (error) {
        console.error('Error fetching refCode:', error);
    }
});
